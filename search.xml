<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode面试题0201移除重复节点</title>
      <link href="/2020/06/26/leetcode/leetcode-mian-shi-ti-0201-yi-chu-chong-fu-jie-dian/"/>
      <url>/2020/06/26/leetcode/leetcode-mian-shi-ti-0201-yi-chu-chong-fu-jie-dian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicateNodes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> head<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        occurred <span class="token operator">=</span> <span class="token punctuation">{</span>head<span class="token punctuation">.</span>val<span class="token punctuation">}</span>        pos <span class="token operator">=</span> head        <span class="token keyword">while</span> pos<span class="token punctuation">.</span>next<span class="token punctuation">:</span>            cur <span class="token operator">=</span> pos<span class="token punctuation">.</span>next            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token operator">not</span> <span class="token keyword">in</span> occurred<span class="token punctuation">:</span>                occurred<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                pos <span class="token operator">=</span> pos<span class="token punctuation">.</span>next            <span class="token keyword">else</span><span class="token punctuation">:</span>                pos<span class="token punctuation">.</span>next <span class="token operator">=</span> pos<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token keyword">return</span> head<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode139单词拆分</title>
      <link href="/2020/06/25/leetcode/leetcode139-dan-ci-chai-fen/"/>
      <url>/2020/06/25/leetcode/leetcode139-dan-ci-chai-fen/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wordBreak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> wordDict<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取s的长度</span>        maxLenghofWord <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">#设置初始的字符长度是0</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#初始化动态规划数组</span>        <span class="token keyword">for</span> word <span class="token keyword">in</span> wordDict<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#对wordDict中的每个词</span>            maxLenghofWord <span class="token operator">=</span> max<span class="token punctuation">(</span>maxLenghofWord<span class="token punctuation">,</span>len<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#更新每次最长单词的长度</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true">#第一个动态规划数组位置设置为true</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#循环n+1次</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>maxLenghofWord<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#循环maxLengofWord次</span>                former <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#前一个位置</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span>  <span class="token punctuation">(</span>s<span class="token punctuation">[</span>former<span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> wordDict<span class="token punctuation">)</span> <span class="token operator">and</span> dp<span class="token punctuation">[</span>former<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#前一个位置是true &amp;&amp; 有一个词匹配到现在的位置</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode16最接近的三数之和</title>
      <link href="/2020/06/24/leetcode/leetcode16-zui-jie-jin-de-san-shu-zhi-he/"/>
      <url>/2020/06/24/leetcode/leetcode16-zui-jie-jin-de-san-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<p>先把数组排序，时间复杂度O(NlogN)。三数之和可以先固定第一个数，然后后面两个数用头和尾的双指针来做相向运动，维护一个离target最近的数，所以需要O(N^2)的时间复杂度。</p><p>from leetcode:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        best <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">7</span>        <span class="token comment" spellcheck="true"># 根据差值的绝对值来更新答案</span>        <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>            nonlocal best            <span class="token keyword">if</span> abs<span class="token punctuation">(</span>cur <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">&lt;</span> abs<span class="token punctuation">(</span>best <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>                best <span class="token operator">=</span> cur        <span class="token comment" spellcheck="true"># 枚举 a</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 保证和上一次枚举的元素不相等</span>            <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token comment" spellcheck="true"># 使用双指针枚举 b 和 c</span>            j<span class="token punctuation">,</span> k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">:</span>                s <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span>                <span class="token comment" spellcheck="true"># 如果和为 target 直接返回答案</span>                <span class="token keyword">if</span> s <span class="token operator">==</span> target<span class="token punctuation">:</span>                    <span class="token keyword">return</span> target                update<span class="token punctuation">(</span>s<span class="token punctuation">)</span>                <span class="token keyword">if</span> s <span class="token operator">></span> target<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 如果和大于 target，移动 c 对应的指针</span>                    k0 <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span>                    <span class="token comment" spellcheck="true"># 移动到下一个不相等的元素</span>                    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> k0 <span class="token operator">and</span> nums<span class="token punctuation">[</span>k0<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>                        k0 <span class="token operator">-=</span> <span class="token number">1</span>                    k <span class="token operator">=</span> k0                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 如果和小于 target，移动 b 对应的指针</span>                    j0 <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>                    <span class="token comment" spellcheck="true"># 移动到下一个不相等的元素</span>                    <span class="token keyword">while</span> j0 <span class="token operator">&lt;</span> k <span class="token operator">and</span> nums<span class="token punctuation">[</span>j0<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                        j0 <span class="token operator">+=</span> <span class="token number">1</span>                    j <span class="token operator">=</span> j0        <span class="token keyword">return</span> best<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode面试题16.18.模式匹配</title>
      <link href="/2020/06/22/leetcode/leetcode-mian-shi-ti-16-18-mo-shi-pi-pei/"/>
      <url>/2020/06/22/leetcode/leetcode-mian-shi-ti-16-18-mo-shi-pi-pei/</url>
      
        <content type="html"><![CDATA[<p>From Orust：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">patternMatching</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pattern<span class="token punctuation">:</span> str<span class="token punctuation">,</span> value<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        cnta<span class="token punctuation">,</span> cntb<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>value<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 计算a和b的个数，n为value长度</span>        <span class="token keyword">for</span> ch <span class="token keyword">in</span> pattern<span class="token punctuation">:</span>            <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">:</span> cnta <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> cntb <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                               <span class="token comment" spellcheck="true"># 判断各种边界情况，pattern或者value为空</span>            <span class="token keyword">return</span> cnta <span class="token operator">*</span> cntb <span class="token operator">==</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cnta <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> cntb <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">elif</span> cnta <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> cntb <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 判断pattern全是a或者全是b的情况</span>                <span class="token keyword">if</span> cnta <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    cnta<span class="token punctuation">,</span> cntb <span class="token operator">=</span> cntb<span class="token punctuation">,</span> cnta      <span class="token comment" spellcheck="true"># 如果cnta为0，两者调换一下</span>                <span class="token keyword">if</span> n <span class="token operator">%</span> cnta <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 不能整除的情况</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                d<span class="token punctuation">,</span> judge <span class="token operator">=</span> n<span class="token operator">//</span>cnta<span class="token punctuation">,</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 用集合来判断是否有第二种字符串出现</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>cnta<span class="token punctuation">)</span><span class="token punctuation">:</span>                    judge<span class="token punctuation">.</span>add<span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token operator">*</span>d<span class="token punctuation">:</span>i<span class="token operator">*</span>d<span class="token operator">+</span>d<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> len<span class="token punctuation">(</span>judge<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">break</span>                <span class="token keyword">return</span> len<span class="token punctuation">(</span>judge<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>           <span class="token comment" spellcheck="true"># 如果自始至终只有一种字符串，那么就是True</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">//</span>cnta<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 一般情况</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token operator">*</span>cnta<span class="token punctuation">)</span> <span class="token operator">%</span> cntb <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 只判断能整除的情况</span>                j <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token operator">*</span>cnta<span class="token punctuation">)</span><span class="token operator">//</span>cntb                cur<span class="token punctuation">,</span> judge <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> ch <span class="token keyword">in</span> pattern<span class="token punctuation">:</span>               <span class="token comment" spellcheck="true"># 用集合来判断是否有第三种字符串出现</span>                    <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">:</span>                        judge<span class="token punctuation">.</span>add<span class="token punctuation">(</span>value<span class="token punctuation">[</span>cur<span class="token punctuation">:</span>cur <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>                        cur <span class="token operator">+=</span> i                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        judge<span class="token punctuation">.</span>add<span class="token punctuation">(</span>value<span class="token punctuation">[</span>cur<span class="token punctuation">:</span>cur <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span>                        cur <span class="token operator">+=</span> j                    <span class="token keyword">if</span> len<span class="token punctuation">(</span>judge<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">break</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>judge<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>  <span class="token comment" spellcheck="true"># 如果自始至终只有两种字符串，那么就是True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行用时：28 ms, 在所有 Python3 提交中击败了99.47%的用户</p><p>内存消耗：13.6 MB, 在所有 Python3 提交中击败了100.00%的用户</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode124二叉树中的最大路径和</title>
      <link href="/2020/06/21/leetcode/leetcode124-er-cha-shu-zhong-de-zui-da-lu-jing-he/"/>
      <url>/2020/06/21/leetcode/leetcode124-er-cha-shu-zhong-de-zui-da-lu-jing-he/</url>
      
        <content type="html"><![CDATA[<p>给定一个<strong>非空</strong>二叉树，返回其最大路径和。</p><p>本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径<strong>至少包含一个</strong>节点，且不一定经过根节点。</p><p>这种题以后需要能手写出来。</p><p>from Leecode：</p><p>时间复杂度：O(N)，其中 N 是二叉树中的节点个数。对每个节点访问不超过 2 次。</p><p>空间复杂度：O(N)，其中 N 是二叉树中的节点个数。空间复杂度主要取决于递归调用层数，最大层数等于二叉树的高度，最坏情况下，二叉树的高度等于二叉树中的节点个数。</p><p>我感觉官方题解肯定是要递归N次的，空间复杂度logn是不存在的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>maxSum <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">"-inf"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">maxPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">maxGain</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token comment" spellcheck="true"># 递归计算左右子节点的最大贡献值</span>            <span class="token comment" spellcheck="true"># 只有在最大贡献值大于 0 时，才会选取对应子节点</span>            leftGain <span class="token operator">=</span> max<span class="token punctuation">(</span>maxGain<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            rightGain <span class="token operator">=</span> max<span class="token punctuation">(</span>maxGain<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值</span>            priceNewpath <span class="token operator">=</span> node<span class="token punctuation">.</span>val <span class="token operator">+</span> leftGain <span class="token operator">+</span> rightGain            <span class="token comment" spellcheck="true"># 更新答案</span>            self<span class="token punctuation">.</span>maxSum <span class="token operator">=</span> max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>maxSum<span class="token punctuation">,</span> priceNewpath<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 返回节点的最大贡献值</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>val <span class="token operator">+</span> max<span class="token punctuation">(</span>leftGain<span class="token punctuation">,</span> rightGain<span class="token punctuation">)</span>        maxGain<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>maxSum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">class Solution {private:    int maxSum = INT_MIN;public:    int maxGain(TreeNode* node) {        if (node == nullptr) {            return 0;        }        // 递归计算左右子节点的最大贡献值        // 只有在最大贡献值大于 0 时，才会选取对应子节点        int leftGain = max(maxGain(node->left), 0);        int rightGain = max(maxGain(node->right), 0);        // 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值        int priceNewpath = node->val + leftGain + rightGain;        // 更新答案        maxSum = max(maxSum, priceNewpath);        // 返回节点的最大贡献值        return node->val + max(leftGain, rightGain);    }    int maxPathSum(TreeNode* root) {        maxGain(root);        return maxSum;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode10正则表达式匹配</title>
      <link href="/2020/06/20/leetcode/leetcode10-zheng-ze-biao-da-shi-pi-pei/"/>
      <url>/2020/06/20/leetcode/leetcode10-zheng-ze-biao-da-shi-pi-pei/</url>
      
        <content type="html"><![CDATA[<p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p><p>‘.’ 匹配任意单个字符<br>‘*’ 匹配零个或多个前面的那一个元素<br>所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。</p><p>说明:</p><p>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。<br>示例 1:</p><p>输入:<br>s = “aa”<br>p = “a”<br>输出: false<br>解释: “a” 无法匹配 “aa” 整个字符串。<br>示例 2:</p><p>输入:<br>s = “aa”<br>p = “a<em>“<br>输出: true<br>解释: 因为 ‘</em>‘ 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 ‘a’。因此，字符串 “aa” 可被视为 ‘a’ 重复了一次。<br>示例 3:</p><p>输入:<br>s = “ab”<br>p = “.<em>“<br>输出: true<br>解释: “.</em>“ 表示可匹配零个或多个（’*’）任意字符（’.’）。<br>示例 4:</p><p>输入:<br>s = “aab”<br>p = “c<em>a</em>b”<br>输出: true<br>解释: 因为 ‘*’ 表示零个或多个，这里 ‘c’ 为 0 个, ‘a’ 被重复一次。因此可以匹配字符串 “aab”。<br>示例 5:</p><p>输入:<br>s = “mississippi”<br>p = “mis<em>is</em>p*.”<br>输出: false</p><p>leetcode官方题解给出的是动态规划，空间复杂度太高了。我感觉可以直接遍历两个字符串，但是没看到有题解是这么写的，但是有一种递归遍历的方式，时间复杂度也是平方项，空间复杂度就变成线性的了，非常好，值得学习。另外我觉得动态规划可能不适合这类题目，因为矩阵太稀疏了。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> p<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#初始化m，n为s，p的长度</span>        <span class="token keyword">def</span> <span class="token function">matches</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> int<span class="token punctuation">,</span> j<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#定义match函数，传入两个整数参数i和j</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果i是0的话</span>                <span class="token keyword">return</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true">#返回false</span>            <span class="token keyword">if</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果p的第j个字符是'.'</span>                <span class="token keyword">return</span> <span class="token boolean">True</span> f <span class="token comment" spellcheck="true">#返回true</span>            <span class="token keyword">return</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#返回s的第i个值和p的第j个值是不是相等</span>        f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#构造矩阵</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#用位运算来赋值</span>                    <span class="token keyword">if</span> matches<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> matches<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>                        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python的递归解法</p><p>from dz-lee:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> p<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> p<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">not</span> s  <span class="token comment" spellcheck="true"># 结束条件，如果p为空的时候，s是否为空</span>        first_match <span class="token operator">=</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#如果有星号的情况</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">>=</span><span class="token number">2</span> <span class="token operator">and</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 返回 匹配0个 | 多个</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>isMatch<span class="token punctuation">(</span>s<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>first_match <span class="token operator">and</span> self<span class="token punctuation">.</span>isMatch<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 下一个</span>        <span class="token keyword">return</span> first_match <span class="token operator">and</span> self<span class="token punctuation">.</span>isMatch<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用@lru_cache(None)缓存的方式会使得时间复杂度大幅度减小</p><p>from simpleson:</p><p>效率很不好看，优化一下：</p><ul><li>记忆化搜索，避免重复递归运算（动态规划）；</li><li>用索引号代替切片，减少cache过程本身的时间成本；</li><li>最大限度维持原先代码的简洁逻辑。</li></ul><p>时间复杂度：</p><ul><li>改进前：平均O(n*2^(星号数))，最差O(2^n)，</li><li>改进后：平均O(n*(星号数+1))，最差O(n²)</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> p<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 装饰符实现记忆化搜索，等价于Top-Down动态规划</span>        @lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 结束条件</span>            <span class="token keyword">if</span> j<span class="token operator">==</span>len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> i<span class="token operator">==</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 首字母匹配</span>            first_match <span class="token operator">=</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">or</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 处理 `*`</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">>=</span>j<span class="token operator">+</span><span class="token number">2</span> <span class="token operator">and</span> p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> recur<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>first_match <span class="token operator">and</span> recur<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 处理首字母匹配</span>            <span class="token keyword">return</span> first_match <span class="token operator">and</span> recur<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> recur<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用时从1000ms提升到50ms</p><p>from orange(c++ version):</p><pre class="line-numbers language-c++"><code class="language-c++">class Solution {public:    bool isMatch(string s, string p) {        return match(s.data(), p.data());    }    bool match(char* s, char* p) {        if (!*p) return !*s;        if (*(p + 1) != '*')             return *s == *p || (*p == '.' && *s != '\0') ? match(s + 1, p + 1) : false;         else             return *s == *p || (*p == '.' && *s != '\0') ? match(s, p + 2) || match(s + 1, p) : match(s, p + 2);            //或者return (*s == *p || (*p == '.' && *s != '\0')) && match(s + 1, p) || match(s, p + 2);    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mushroom Classification</title>
      <link href="/2020/06/19/mushroom-classification/"/>
      <url>/2020/06/19/mushroom-classification/</url>
      
        <content type="html"><![CDATA[<p>本次作业名称：Neural Network Practice 作业内容：本次作业主要是希望通过实践，加深大家对于神经网络的理解。作业的数据集：Mushroom Classification data Sources，作业内容主要是对收集的Mushroom数据进行分类，判断是否有毒，具体的数据格式 以及详细要求参考以上链接。 作业要求：使用自己搭建的人工神经⽹络模型完成Classification任务，并且对模型进行不断优化，将准确率提升到极 限。希望同学们自己动手搭建神经⽹络。代码实现可以参考教科书中的手写数字识别样例代码neural-networksand-deep-learning。不推荐使⽤已有的集成Machine Learning库，⽐如：keras，sklearn等。目的是让大家深入 体会神经网络的构造细节。 提交材料： 1. 报告一份，描述神经网络的构建过程、优化过程、参数选择的考虑、以及心得体会。 2. 代码一份。 提交时间：7月3日 参考资料：Neural Networks and Deep Learning</p>]]></content>
      
      
      <categories>
          
          <category> deep learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode125验证回文串</title>
      <link href="/2020/06/19/leetcode/leetcode125-yan-zheng-hui-wen-chuan/"/>
      <url>/2020/06/19/leetcode/leetcode125-yan-zheng-hui-wen-chuan/</url>
      
        <content type="html"><![CDATA[<p>From Leetcode:</p><p>让字符串字母都变成小写，然后只保留字母和数字，翻转，比较得到结果</p><p>#感觉python的条件，循环语句已经十分接近自然语言了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        sgood <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ch<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> ch <span class="token keyword">in</span> s <span class="token keyword">if</span> ch<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#sgood = ''.join(filter(str.isalnum, s.lower()))</span>        <span class="token keyword">return</span> sgood <span class="token operator">==</span> sgood<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用双指针，初始时指向字符串的两端，然后相向移动，每移动一步就判断两个指针指向的字符是否相同。当两个指针相遇时，即回文串。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        sgood <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ch<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> ch <span class="token keyword">in</span> s <span class="token keyword">if</span> ch<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>sgood<span class="token punctuation">)</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> sgood<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!=</span> sgood<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode1028从先序遍历还原二叉树</title>
      <link href="/2020/06/18/leetcode/leetcode1028-cong-xian-xu-bian-li-huan-yuan-er-cha-shu/"/>
      <url>/2020/06/18/leetcode/leetcode1028-cong-xian-xu-bian-li-huan-yuan-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<p>由于是先序遍历，所以如果顺序遍历其结果，如果出现一个新的node，那必然是上一层最后一个node的左子树或者右子树。<br>所以通过计数计算出节点的深度的时候，判断其是为左子树还是右子树。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">recoverFromPreorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> S<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> S<span class="token punctuation">:</span> <span class="token keyword">return</span> None        depth <span class="token operator">=</span> valueSave <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">#节点深度value存储都设置为0</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>S<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#设置n为S的长度</span>        dic <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#构造字典</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> value <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#对S中的key和value遍历</span>            <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#如果value为“-”，则深度+1</span>                depth <span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#如果value是值的话</span>                valueSave <span class="token operator">=</span> valueSave <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> int<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#用一个num存储value</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> n<span class="token number">-1</span> <span class="token operator">or</span> S<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果i到了最后一个值或者是下一个值是‘-’</span>                    node <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>valueSave<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#用node储存TreeNode(valueSave)</span>                    dic<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#加入dic</span>                    <span class="token keyword">if</span> dic<span class="token punctuation">[</span>depth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#如果上一层存在，那这个node一定是上一次最后一个node的左子树或者右子树</span>                        <span class="token keyword">if</span> dic<span class="token punctuation">[</span>depth<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">:</span>                              dic<span class="token punctuation">[</span>depth<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right <span class="token operator">=</span> node                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            dic<span class="token punctuation">[</span>depth<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left <span class="token operator">=</span> node                    depth <span class="token operator">=</span> valueSave <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">#深度和value存储都置为0</span>        <span class="token keyword">return</span> dic<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#返回根节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode1014最佳观光组合</title>
      <link href="/2020/06/18/leetcode/leetcode1014-zui-jia-guan-guang-zu-he/"/>
      <url>/2020/06/18/leetcode/leetcode1014-zui-jia-guan-guang-zu-he/</url>
      
        <content type="html"><![CDATA[<p>给定正整数数组 <code>A</code>，<code>A[i]</code> 表示第 <code>i</code> 个观光景点的评分，并且两个景点 <code>i</code> 和 <code>j</code> 之间的距离为 <code>j - i</code>。</p><p>一对景点（<code>i &lt; j</code>）组成的观光组合的得分为（<code>A[i] + A[j] + i - j</code>）：景点的评分之和<strong>减去</strong>它们两者之间的距离。</p><p>返回一对观光景点能取得的最高分。</p><p><strong>示例：</strong></p><pre><code>输入：[8,1,5,2,6]输出：11解释：i = 0, j = 2, A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11</code></pre><p>把这个公式变成$A[i]+i+A[j]-j$  ，这样可以把公式看成左边和右边两部分加起来，求其和的最大值。遍历数组，动态更新res和left。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxScoreSightseeingPair</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        left<span class="token punctuation">,</span> res <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span> left <span class="token operator">+</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">)</span>            left <span class="token operator">=</span> max<span class="token punctuation">(</span>left<span class="token punctuation">,</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxScoreSightseeingPair</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> left <span class="token operator">+</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrt system call and EDF near real-time scheduling</title>
      <link href="/2020/06/17/operating-system/chrt-xi-tong-diao-yong-he-edf-jin-si-shi-shi-diao-du/"/>
      <url>/2020/06/17/operating-system/chrt-xi-tong-diao-yong-he-edf-jin-si-shi-shi-diao-du/</url>
      
        <content type="html"><![CDATA[<p>一、    <strong>目的</strong></p><p>在MINIX3中实现Earliest-Deadline-First近似实时调度功能。</p><p>二、    <strong>内容与设计思想</strong></p><p>\1. 提供设置进程执行期限的系统调度chrt (long deadline)，用于将调</p><p>用该系统调用的进程设为实时进程，其执行的期限为：从调用处</p><p>开始deadline秒。例如：</p><p>chrt的定义：</p><p>int chrt(long deadline);</p><p>/<em>deadline 是最后期限值(秒)，返回值1表示成功，返回值0表示该调用出错</em>/</p><p>\2. 在内核进程表中需要增加一个条目，用于表示进程的实时属性；</p><p>修改相关代码，新增一个系统调用chrt，用于设置其进程表中的</p><p>实时属性。</p><p>\3. 修改proc.c和proc.h中相关的调度代码，实现最早deadline的用户进</p><p>程相对于其它用户进程具有更高的优先级，从而被优先调度运行。</p><p>\4. 在用户程序中，可以在不同位置调用多次chrt系统调用，在未到</p><p>deadline之前，调用chrt将会改变该程序的deadline。</p><p>\5. 未调用chrt的程序将以普通的用户进程(非实时进程)在系统中运行。</p><p>三、    <strong>使用环境</strong></p><p>虚拟机中下载minix3.3.0源码：</p><p>cd /usr</p><p>git clone git://git.minix3.org/minix src # 联机下载代码</p><p>cd src</p><p>git branch –a # 查看代码版本</p><p>git checkout R3.3.0 # 将代码版本切换为3.3.0</p><p>也可以手动下载并解压到相同位置</p><p>编译源码并安装：</p><p>cd /usr/src</p><p>make build #首次编译，或者修改了头文件，Makefile时使用，时间</p><p>较长。</p><p>Make build MKUPDATE=yes #增量式编译，适用于少量C源代码修</p><p>改时使用。</p><p>reboot #重启，默认情况下自动选择latest kernel（新生成的kernel），</p><p>需要原始版本时手工选择。</p><p>四、    <strong>实验过程</strong></p><p>增加系统调用chrt：</p><p>MINIX3中的系统调用结构分成三个层次：应用层，服务层，内 核层。在这三层中分别进行代码修改，实现系统调用chrt的信息 传递。从应用层用_syscall将信息传递到服务层，在服务层用 _kernel_call将信息传递到内核层，在内核层对进程结构体增加 deadline成员。</p><p><strong>1.**</strong>应用层：**</p><p>需要添加的系统调用chrt可以定义在unistd头文件中， 并在libc中添加chrt函数体实现。</p><p>在/usr/src/include/unistd.h 中添加chrt函数定义。</p><p>在/usr/src/minix/lib/libc/sys/chrt.c中添加chrt函数实现。可用alarm函 数实现超时强制终止。参照该文件夹下fork.c文件，在实现中通过 syscall (调用号)向系统服务传递。</p><p>例如： pid_t fork(void) { return(syscall(PM_PROC_NR, PM_FORK, &amp;m)); } </p><p>在/usr/src/minix/lib/libc/sys中Makefile.inc文件添加chrt.c条目（添加 C文件后，需在同目录下的Makefile/Makefile.inc中。</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033502.jpg" alt></p><p>在Linux中常用的时间结构有struct timespec<br> struct timespec<br> {<br>     __time_t tv_sec;     <em>//</em> Seconds. <em>//</em><br>     long  tv_nsec;    <em>//</em> Nanoseconds. <em>//</em><br> };<br> 可以通过 int clock_gettime(clockid_t clk_id, struct timespec *tp)来获取系统时间<br> CLOCK_REALTIME:系统实时时间</p><p><strong>2**</strong>．服务层：**</p><p>需要向MINIX系统的进程管理服务中注册chrt，使得chrt服务可以向应用层提供。</p><p>在/usr/src/minix/servers/pm/proto.h中添加chrt函数定义。</p><p>在/usr/src/minix/servers/pm/chrt.c中添加chrt函数实现，调用sys_chrt()</p><p>在/usr/src/minix/include/minix/callnr.h中定义PM_CHRT编号。</p><p>在/usr/src/minix/servers/pm/Makefile中添加chrt.c条目。</p><p>proto.h:</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033540.jpg" alt></p><p>callnr.h:</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033547.jpg" alt></p><p>chrt.c:</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033554.jpg" alt></p><p>在/usr/src/minix/servers/pm/table.c 中调用映射表。</p><p>在/usr/src/minix/include/minix/syslib.h 中添加sys_ chrt () 定义。</p><p>在/usr/src/minix/lib/libsys/sys_chrt.c 中添加sys_chrt () 实现。可参照</p><p>该文件夹下的sys_fork文件，在实现中通过_kernel_call (调用号)向</p><p>内核传递。例如：</p><p>int sys_fork(parent, child, child_endpoint, flags, msgaddr)</p><p>{</p><p>_kernel_call(SYS_FORK, &amp;m);</p><p>}</p><p>在/usr/src/minix/lib/libsys 中的Makefile中添加sys_chrt.c条目。</p><p>table.c:</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033602.jpg" alt></p><p>syslib.h:</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033610.jpg" alt="img"></p><p>sys_chrt.c: <img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033626.jpg" alt></p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033633.jpg" alt></p><p><strong>3.**</strong>内核层：**</p><p><strong>3.1.</strong></p><p>在MINIX内核中实现进程调度功能，此处可以直接修改内核信息，例如进程的截至时间。</p><p>在/usr/src/minix/kernel/system.h中添加do_chrt函数定义。</p><p>在/usr/src/minix/kernel/system/do_ chrt.c中添加do_chrt函数实现。参考该文件下的do_fork文件，修改调用者进程信息。</p><p>例如：</p><p>pid_t fork(void)</p><p>{</p><p>return(_syscall(PM_PROC_NR, PM_FORK, &amp;m));</p><p>}</p><p>在/usr/src/minix/kernel/system/ 中Makefile.inc文件添加do_chrt.c条目。</p><p>system.h:</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033646.jpg" alt></p><p>/system/do_chrt.c: <img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033654.jpg" alt></p><p><strong>3.2.</strong></p><p>在/usr/src/minix/include/minix/com.h中定义SYS_CHRT编号。</p><p>在/usr/src/minix/kernel/system.c 中添加SYS_CHRT编号到do_chrt的</p><p>映射。</p><p>在/usr/src/minix/commands/service/parse.c的system_tab中添加名称编</p><p>号对。</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033704.jpg" alt></p><p><img src="C:/Users/wulin/AppData/Local/Temp/msohtmlclip1/01/clip_image024.jpg" alt="img"></p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033712.jpg" alt></p><p><strong>3.3**</strong>．**</p><p>在config.h文件里定义USE_CHRT</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033718.jpg" alt></p><p><strong>4.MINIX3**</strong>中的进程调度：**</p><p>进程调度模块位于/usr/src/minix/kernel/下的proc.h和proc.c，修</p><p>改影响进程调度顺序的部分:</p><p>struct proc 维护每个进程的信息，用于调度决策。添加deadline成员。</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033729.jpg" alt></p><p>switch_to_user() 选择进程进行切换。</p><p>enqueue_head() 按优先级将进程加入列队首。实验中需要将实时进程的优</p><p>先级设置成合适的优先级。</p><p>enqueue() 按优先级将进程加入列队尾。同上。</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033736.jpg" alt></p><p>pick_proc() 从队列中返回一个可调度的进程。遍历设置的优先级队列，返</p><p>回剩余时间最小并可运行的进程。</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033742.jpg" alt></p><p><strong>5.**</strong>测试**</p><p>测试代码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;lib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">void</span> <span class="token function">proc</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//creat 3 procs</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">proc</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">proc</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> loop<span class="token punctuation">;</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//proc1，set deadline=20</span>   <span class="token function">chrt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"proc1 set success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//proc2，set deadline=15</span>   <span class="token function">chrt</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"proc2 set success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//proc3，normal proc</span>   <span class="token function">chrt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"proc3 set success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>loop <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> loop <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> loop<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//proc1 set deadline=5 after 5s</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> loop <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">chrt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Change proc1 deadline to 5s\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//proc3 set deadline=3 after 10s</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> loop <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token function">chrt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Change proc3 deadline to 3s\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//sleep</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"prc%d heart beat %d\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> loop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果:</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033752.jpg" alt></p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/chrt_system_call_and_EDF_near_real-time_scheduling/20200617033336.png" alt></p><p>五、    <strong>总结</strong></p><p>此次任务是在MINIX3中新增一个系统调用，由于MINIX3有三个层级结构：应用层，服务层，内核层，所以需要在这三层中分别进行代码修改，实现系统调用chrt的信息传递。从应用层用_syscall将deadline信息传递到服务层，在服务层用_kernel_call将进程位置和deadline信息传递到内核层，在内核层对进程结构体增加deadline成员。</p><p>在实验的过程中并不是从应用层写到内核层，或者从内核层写到应用层这样一气呵成的，需要两边同时进行，一点一点把该层逻辑和层次之间的传递逻辑搞清楚。并且编译非常消耗时间，完整编译一次需要18分钟。只有在最后头文件，Makefile全部完成，不再修改之后，对proc.c，chrt.c的修改才能使用增量编译。编译一次大概也要几分钟时间。</p><p>应用层修改的文件是：</p><p>Src/include/unistd.h</p><p>Src/minix/lib/libc/sys/chrt.c</p><p>Src/minix/lib/libc/sys/Makefile.inc</p><p>主要是完成chrt.c的函数逻辑部分。并且在unistd.h,Makefile.c添加定义即可，chrt函数调用_syscall(PM_PROC_NR,PM_CHRT,&amp;m),通过m消息结构体进行IPC通信，传递deadline，注意传入的adline是系统时间+输入的deadline，如果直接把deadline传入，第二次调用chrt，会使得deadline的比较在逻辑上出错。在这一层实现alarm函数超时强制中止。</p><p>服务层修改的文件是：<br> Src/minix/servers/pm/proto.h</p><p>Src/minix/servers/pm/table.c</p><p>Src/minix/servers/pm/chrt.c</p><p>Src/minix/servers/pm/Makefile.inc</p><p>Src/minix/lib/libsys/sys_chrt.c</p><p>Src/minix/lib/libsys/Makefile.inc</p><p>Src/minix/include/minix/callnr.h</p><p>Src/minix/include/minix/syslib.h</p><p>Src/minix/include/minix/com.h</p><p>服务层的逻辑比应用层要相对复杂，需要先查找系统调用中是否有PM_CHRT，若有则调用映射表中其对应的do_chrt函数，do_chrt函数调用sys_chrt函数，sys_chrt函数调用_kernel_call(SYS_CHRT,&amp;m)，对应的sys_chrt也要在com.h内核映射表中注册。</p><p>内核层修改的文件是：</p><p>Src/minix/kernel/proc.h</p><p>Src/minix/kernel/proc.c</p><p>Src/minix/kernel/system/system.h</p><p>Src/minix/kernel/system/do_chrt.c</p><p>Src/minix/kernel/system/Makefile.inc</p><p>Src/minix/kernel/commands/service/parse.c</p><p>内核调用之后，需要查找映射表中是否含有SYS_CHRT，若有则调用其对应的do_chrt函数，do_chrt函数找到内核中的进程地址，并修改进程内容。</p><p>修改proc.c进程调度文件，将所有deadline大于0的进程设置为第5优先队列，并且在队列中遍历，使得deadline小的优先调用(注意传入的deadline由于加上了系统时间一定是大于0的，所以在应用层chrt.c中不能将deadline=0的进程，即普通进程传入)。</p>]]></content>
      
      
      <categories>
          
          <category> operating system </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode297二叉树的序列化与反序列化</title>
      <link href="/2020/06/17/leetcode/leetcode297-er-cha-shu-de-xu-lie-hua-yu-fan-xu-lie-hua/"/>
      <url>/2020/06/17/leetcode/leetcode297-er-cha-shu-de-xu-lie-hua-yu-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p><p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p><p>示例: </p><p>你可以将以下二叉树：</p><p>​    1</p><p>   / <br>  2   3<br>     / <br>    4   5</p><p>序列化为 “[1,2,3,null,null,4,5]”<br>提示: 这与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p><p>说明: 不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。</p><p>用到的一个if else的三元表达式可参考：<br><a href="https://www.cnblogs.com/caizhao/p/7905094.html" target="_blank" rel="noopener">https://www.cnblogs.com/caizhao/p/7905094.html</a></p><p>from 突突突废柴要努力啦：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#序列化，传入参数：这个二叉树</span>    s <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment" spellcheck="true">#先将置为空字符串</span>    queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#将queue置为空列表，即构造一个队列</span>    queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将这个二叉树加入队列</span>    <span class="token keyword">while</span> queue<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#如果queue不为空的话</span>        root <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#root赋值为队头，队头弹出</span>        <span class="token keyword">if</span> root<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#如果root不为空的话</span>            s <span class="token operator">+=</span> str<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#s附加root.val</span>            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#左子树入队列</span>            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#右子树入队列</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#如果root为空的话</span>            s <span class="token operator">+=</span> <span class="token string">"n"</span>  <span class="token comment" spellcheck="true">#s附加n</span>        s <span class="token operator">+=</span> <span class="token string">" "</span>    <span class="token comment" spellcheck="true">#s附加" "</span>    <span class="token keyword">return</span> s<span class="token keyword">def</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#反序列化，传入参数：这个序列</span>    tree <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将数据分片</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#stdout</span>    <span class="token keyword">if</span> tree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"n"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果第一个是n，即上面在序列化函数中传入的n</span>        <span class="token keyword">return</span> None  <span class="token comment" spellcheck="true">#返回none</span>    queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#空队列</span>    root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>int<span class="token punctuation">(</span>tree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#定义root，为treenode这个object，传入参数</span>    queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#root入队列</span>    i <span class="token operator">=</span> <span class="token number">1</span>     <span class="token keyword">while</span> queue<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#当队列不为0时</span>        cur <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#当前节点为队首节点</span>        <span class="token keyword">if</span> cur <span class="token operator">==</span> None<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果当前节点为空，就继续循环</span>            <span class="token keyword">continue</span>        cur<span class="token punctuation">.</span>left <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>int<span class="token punctuation">(</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"n"</span> <span class="token keyword">else</span> None          cur<span class="token punctuation">.</span>right <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>int<span class="token punctuation">(</span>tree<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> tree<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"n"</span> <span class="token keyword">else</span> None        i <span class="token operator">+=</span> <span class="token number">2</span>        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My basic shell</title>
      <link href="/2020/06/16/operating-system/my-basic-shell/"/>
      <url>/2020/06/16/operating-system/my-basic-shell/</url>
      
        <content type="html"><![CDATA[<p>在minix3下实现一个基本的shell，能解析的命令如下：</p><ol><li>带参数的程序运行功能。<br>program arg1 arg2 … argN</li><li>重定向功能，将文件作为程序的输入/输出。<ol><li>“&gt;”表示覆盖写<br>program arg1 arg2 … argN &gt; output-file</li><li>“&gt;&gt;”表示追加写<br>program arg1 arg2 … argN &gt;&gt; output-file</li><li>“&lt;”表示文件输入<br>program arg1 arg2 … argN &lt; input-file</li></ol></li><li>管道符号“|”，在程序间传递数据。<br>programA arg1 … argN | programB arg1 … argN</li><li>后台符号&amp; ,表示此命令将以后台运行的方式执行。<br>program arg1 arg2 … argN &amp;</li><li>工作路径移动命令cd。</li><li>程序运行统计mytop。</li><li>shell退出命令exit。</li><li>history n显示最近执行的n条指令。</li></ol><p>支持的样例:</p><pre class="line-numbers language-bash"><code class="language-bash">1. cd/your/path2. ls<span class="token punctuation">(</span>-a/-l -a<span class="token punctuation">)</span>3. <span class="token function">ls</span> -a -l <span class="token operator">></span> outfile4. <span class="token function">vi</span> <span class="token function">file</span>5. <span class="token function">grep</span> <span class="token string">"parameters"</span> <span class="token operator">&lt;</span> inputfile6. Ls -a -l <span class="token operator">|</span> <span class="token function">grep</span> a7. <span class="token function">vi</span> <span class="token function">file</span> <span class="token operator">&amp;</span>8. mytop9. <span class="token function">history</span> n10. Exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Shell主体：<br>Shell主体结构是一个while循环，不断地接受用户键盘输入行并给出反<br>馈。Shell将输入行分解成单词序列，根据命令名称分为二类分别处理，<br>即shell内置命令（例如cd，history，exit）和program命令（例如/bin/<br>目录下的ls，grep 等）。识别为shell内置命令后，执行对应操作。接<br>受program命令后，利用minix自带的程序创建一个或多个新进程，并<br>等待进程结束。如果末尾包含&amp;参数，Shell可以不等待进程结束，直接返回。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> historycount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>history<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>history<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>history<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>MAXLINE<span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>find<span class="token punctuation">;</span>        find<span class="token operator">=</span><span class="token function">strchr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>find<span class="token punctuation">)</span>            <span class="token operator">*</span>find<span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        history<span class="token punctuation">[</span>historycount<span class="token punctuation">]</span><span class="token operator">=</span>tmp <span class="token punctuation">;</span>        historycount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> cmdline cmd<span class="token operator">=</span><span class="token function">parse_line</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span>history<span class="token punctuation">,</span>historycount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在shell.h中包含了函数声明/常数定义/编译所用的头文件</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"string.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;signal.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;dirent.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXLINE 1024</span><span class="token macro property">#<span class="token directive keyword">define</span> STD_INPUT 0</span><span class="token macro property">#<span class="token directive keyword">define</span> STD_OUTPUT 1</span><span class="token macro property">#<span class="token directive keyword">define</span> MAX_ARGC 5</span><span class="token keyword">struct</span> cmdline<span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>parameters<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 分词之后，储存</span>    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 参数个数</span>    <span class="token keyword">int</span> flag_background<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是否后台</span>    <span class="token keyword">int</span> flag_special<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//是否有特殊符号</span>    <span class="token keyword">int</span> special_position<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//特殊符号位置</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> cmdline <span class="token function">parse_line</span><span class="token punctuation">(</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">execmd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> cmdline cmd<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>history<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> historycount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">exe_mytop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">exe_cd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>parameters<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> history<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> historycount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">exe_history</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>parameters<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> history<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> historycount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">exe_ls</span><span class="token punctuation">(</span><span class="token keyword">struct</span> cmdline cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span>  <span class="token function">exe_grep</span><span class="token punctuation">(</span><span class="token keyword">struct</span> cmdline cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">exe_vi</span><span class="token punctuation">(</span><span class="token keyword">struct</span> cmdline cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token keyword">struct</span> cmdline cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token keyword">struct</span> cmdline cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pipeimple</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>process1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>process2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在shell.c中需要对输入的命令行结构进行解析：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> cmdline <span class="token function">parse_line</span><span class="token punctuation">(</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token operator">=</span>buf<span class="token punctuation">;</span>    <span class="token keyword">struct</span> cmdline parsecmd<span class="token punctuation">;</span>    parsecmd<span class="token punctuation">.</span>buf<span class="token operator">=</span>buf<span class="token punctuation">;</span>    parsecmd<span class="token punctuation">.</span>flag_special<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    parsecmd<span class="token punctuation">.</span>special_position<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>token <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    parsecmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>token<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>token <span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        token <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        parsecmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>token<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token operator">||</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token operator">||</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token operator">||</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                parsecmd<span class="token punctuation">.</span>flag_special<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                parsecmd<span class="token punctuation">.</span>special_position<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    parsecmd<span class="token punctuation">.</span>argc<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存参数个数</span>    parsecmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>parsecmd<span class="token punctuation">.</span>argc<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将末尾置为null</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">,</span>parsecmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>parsecmd<span class="token punctuation">.</span>argc<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        parsecmd<span class="token punctuation">.</span>flag_background<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        parsecmd<span class="token punctuation">.</span>flag_background<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> parsecmd<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据识别出来的具体命令，通过一个命令映射函数/表，映射到具体的命令：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//解析具体命令</span><span class="token keyword">void</span> <span class="token function">execmd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> cmdline cmd<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>history<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> historycount<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"cd"</span><span class="token punctuation">,</span>cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">exe_cd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">,</span>history<span class="token punctuation">,</span>historycount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"history"</span><span class="token punctuation">,</span>cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">exe_history</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">,</span>history<span class="token punctuation">,</span>historycount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"exit"</span><span class="token punctuation">,</span>cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"mytop"</span><span class="token punctuation">,</span>cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">exe_mytop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"vi"</span><span class="token punctuation">,</span>cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">exe_vi</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span>cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">exe_ls</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"grep"</span><span class="token punctuation">,</span>cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">exe_grep</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"there is no command %s"</span><span class="token punctuation">,</span>cmd<span class="token punctuation">.</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后对每个具体的命令分别进行实现：</p><p>Shell内置命令：</p><ol><li>cd：因为Shell也是一个程序，启动时minix会分配一个当前工作目<br>录，利用chdir系统调用可以移动Shell的工作目录。</li><li>history：保存Shell每次的输入行，打印所需字符串即可。</li><li>exit：退出Shell的while循环，结束Shell的main函数。</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*cd和chdir系统调用*/</span><span class="token keyword">void</span> <span class="token function">exe_cd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>parameters<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> history<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> historycount<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">chdir</span><span class="token punctuation">(</span>parameters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"chdir failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cd to %s succeeded!"</span><span class="token punctuation">,</span>parameters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//histroy命令，打印最近n条命令，n不超过输入总命令数</span><span class="token keyword">void</span> <span class="token function">exe_history</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>parameters<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> history<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> historycount<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>parameters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">></span>historycount<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n is too large!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> historycount<span class="token number">-2</span><span class="token punctuation">;</span> i <span class="token operator">></span> historycount<span class="token number">-2</span><span class="token operator">-</span>n <span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>history<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Program命令：</p><ol><li>运行程序：利用fork调用创建进行子进程，利用execvp调用将minix程序装<br>载到该进程，并赋予运行参数，最后Shell利用wait/waitpid调用等待子进程<br>结束。（参见UNIX高级编程8.3，8.7和8.10节）</li><li>重定向：minix为每个进程赋予键盘输入和控制台输出的文件描述符默认<br>为0和1。子进程装载程序前，利用close(0 or 1)将默认输入或者输出关闭，<br>再调用dup(fd)将某个打开文件的文件描述fd映射到标准输入或输出。（参<br>见UNIX高级编程3.12节）</li><li>管道：若有n个子进程组成管道流，Shell在fork先用pipe调用创建n-1对管<br>道描述符，关闭不需要的读写端。Shell运行fork后，每个子进程利用dup将<br>前一个管道的读端映射到标准输入，后一个管道的写端映射到标准输出。<br>（参见UNIX高级编程15.2节）</li><li>后台运行：为了屏蔽键盘和控制台，子进程的标准输入、输出映射成<br>/dev/null。子进程调用signal(SIGCHLD,SIG_IGN)，使得minix接管此进程。<br>因此Shell可以避免调用wait/waitpid直接运行下一条命令。</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*Program*/</span><span class="token comment" spellcheck="true">/*ls命令，支持管道和重定向*/</span><span class="token keyword">void</span> <span class="token function">exe_ls</span><span class="token punctuation">(</span><span class="token keyword">struct</span> cmdline cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>flag_special<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> pid<span class="token punctuation">,</span>status<span class="token punctuation">;</span>        pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fork error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">execvp</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span>cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>cmd<span class="token punctuation">.</span>special_position<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">||</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>cmd<span class="token punctuation">.</span>special_position<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">||</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>cmd<span class="token punctuation">.</span>special_position<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">redirect</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">pipeline</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//vi命令，将输入输出都映射到/dev/null*/</span><span class="token keyword">void</span> <span class="token function">exe_vi</span><span class="token punctuation">(</span><span class="token keyword">struct</span> cmdline cmd <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pid<span class="token punctuation">,</span>status<span class="token punctuation">;</span>    pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fork error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>flag_background <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/null"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/null"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">signal</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span> SIG_IGN<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">execvp</span><span class="token punctuation">(</span><span class="token string">"vi"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">execvp</span><span class="token punctuation">(</span><span class="token string">"vi"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//grep命令，支持重定向</span><span class="token keyword">void</span> <span class="token function">exe_grep</span><span class="token punctuation">(</span><span class="token keyword">struct</span> cmdline cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>flag_special<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> pid<span class="token punctuation">,</span>status<span class="token punctuation">;</span>        pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fork error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">execvp</span><span class="token punctuation">(</span><span class="token string">"grep"</span><span class="token punctuation">,</span>cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>flag_background<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">redirect</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 重定向 * 先把命令拆分一下， * 如果中间的符号是>或者>>,就输出重定向   */</span><span class="token keyword">void</span> <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token keyword">struct</span> cmdline cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>argv1<span class="token punctuation">[</span>MAX_ARGC<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>argv2<span class="token punctuation">[</span>MAX_ARGC<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>MAX_ARGC<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        argv1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        argv2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cmd<span class="token punctuation">.</span>special_position<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        argv1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    argv1<span class="token punctuation">[</span>cmd<span class="token punctuation">.</span>special_position<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最后要置NULL</span>    <span class="token keyword">int</span> j<span class="token operator">=</span>cmd<span class="token punctuation">.</span>special_position<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cmd<span class="token punctuation">.</span>argc <span class="token operator">-</span> cmd<span class="token punctuation">.</span>special_position<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        argv2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    argv2<span class="token punctuation">[</span>cmd<span class="token punctuation">.</span>argc<span class="token operator">-</span>cmd<span class="token punctuation">.</span>special_position<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pid<span class="token punctuation">,</span> status<span class="token punctuation">,</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>cmd<span class="token punctuation">.</span>special_position<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">||</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>cmd<span class="token punctuation">.</span>special_position<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        fd <span class="token operator">=</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        fd <span class="token operator">=</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fork error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>cmd<span class="token punctuation">.</span>special_position<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">open</span><span class="token punctuation">(</span>argv2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_WRONLY <span class="token operator">|</span> O_CREAT <span class="token operator">|</span> O_TRUNC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//fd=1</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>cmd<span class="token punctuation">.</span>special_position<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">open</span><span class="token punctuation">(</span>argv2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  O_WRONLY <span class="token operator">|</span> O_CREAT <span class="token operator">|</span> O_APPEND<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//fd=1</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">open</span><span class="token punctuation">(</span>argv2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">execvp</span><span class="token punctuation">(</span>argv1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>argv1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>cmd<span class="token punctuation">.</span>special_position<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">||</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>cmd<span class="token punctuation">.</span>special_position<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dup</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//两条线路，分别有不同的开关的文件标识符</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 管道*/</span><span class="token keyword">void</span> <span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token keyword">struct</span> cmdline cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>argv1<span class="token punctuation">[</span>MAX_ARGC<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>argv2<span class="token punctuation">[</span>MAX_ARGC<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>MAX_ARGC<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        argv1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        argv2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cmd<span class="token punctuation">.</span>special_position<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        argv1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    argv1<span class="token punctuation">[</span>cmd<span class="token punctuation">.</span>special_position<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span>cmd<span class="token punctuation">.</span>special_position<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cmd<span class="token punctuation">.</span>argc <span class="token operator">-</span> cmd<span class="token punctuation">.</span>special_position<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        argv2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cmd<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    argv2<span class="token punctuation">[</span>cmd<span class="token punctuation">.</span>argc<span class="token operator">-</span>cmd<span class="token punctuation">.</span>special_position<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> status<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">pipeimple</span><span class="token punctuation">(</span>argv1<span class="token punctuation">,</span>argv2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*管道实现*/</span><span class="token keyword">void</span> <span class="token function">pipeimple</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>process1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>process2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">pipe</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pid<span class="token punctuation">,</span>status<span class="token punctuation">;</span>    pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fork error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>STD_OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dup</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execvp</span><span class="token punctuation">(</span>process1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> process1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>STD_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dup</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execvp</span><span class="token punctuation">(</span>process2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> process2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内置命令mytop：<br>4. mytop：参考minix终端输入top命令的输出信息，在minix系统/proc文件夹<br>中通过open/read系统调用输出进程信息。</p><ol><li>/proc/meminfo中， 查看内存信息，每个参数对应含义依次是页面大小pagesize，<br>总页数量total ， 空闲页数量free ，最大页数量largest ，缓存页数量cached 。可<br>计算内存大小： (pagesize * total)/1024，同理算出其他页内存大小。</li><li>/proc/kinfo中，查看进程和任务数量。</li><li>/proc/pid/psinfo中，例如/proc/107/psinfo文件中，查看pid为107的进程信息。每<br>个参数对应含义依次是：版本version，类型type，端点endpt，名字name，状态<br>state，阻塞状态blocked，动态优先级priority，滴答ticks，高周期highcycle，低<br>周期lowcycle，内存memory，有效用户ID effuid，静态优先级nice等。其中会用<br>到的参数有：类型，状态，滴答。进程时间time=ticks/ (u32_t)60。</li><li>输出内容：</li><li>总体内存大小，空闲内存大小，缓存大小。</li><li>总体CPU使用占比。计算方法：得到进程和任务总数量total_proc，对每一个proc的ticks累加得到总体ticks，再计算空闲的ticks，最终可得到CPU使用百分比。</li></ol><p>宏定义mytop.h（参考top.c）</p><p>具体实现：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//读取meminfo</span><span class="token keyword">void</span> <span class="token function">print_memifo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获得nr_totals</span><span class="token keyword">void</span> <span class="token function">getkinfo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//打印使用率</span><span class="token keyword">void</span> <span class="token function">print_cpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">get_procs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>prev_proc<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token function">get_procs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_procs</span><span class="token punctuation">(</span>prev_proc<span class="token punctuation">,</span>proc<span class="token punctuation">,</span>cputimenode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//从get_procs到parse_dir到parse_file的三层调用</span><span class="token comment" spellcheck="true">//print_procs调用cputicks</span><span class="token comment" spellcheck="true">//print_procs中计算：</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"CPU USED: %6.2f%% , "</span><span class="token punctuation">,</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>systemticks<span class="token operator">+</span>kernelticks<span class="token operator">+</span>userticks<span class="token punctuation">)</span><span class="token operator">/</span> total_ticks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"CPU IDLE: %6.2f%% , "</span><span class="token punctuation">,</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>total_ticks<span class="token operator">-</span>systemticks<span class="token operator">-</span>kernelticks<span class="token operator">-</span>userticks<span class="token punctuation">)</span><span class="token operator">/</span> total_ticks<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> operating system </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode14最长公共前缀</title>
      <link href="/2020/06/16/leetcode/leetcode14-zui-chang-gong-gong-qian-zhui/"/>
      <url>/2020/06/16/leetcode/leetcode14-zui-chang-gong-gong-qian-zhui/</url>
      
        <content type="html"><![CDATA[<p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”。</p><p>示例 1:</p><p>输入: [“flower”,”flow”,”flight”]<br>输出: “fl”<br>示例 2:</p><p>输入: [“dog”,”racecar”,”car”]<br>输出: “”<br>解释: 输入不存在公共前缀。<br>说明:</p><p>所有输入只包含小写字母 a-z 。</p><p>题解：<br>python有两种解法利用了语言的特性，十分短小精悍。<br>我每次新看到一个python的语法特性的时候，我内心都要波动一会，这个语言怎么有那么多不讲道理的语法，怎么有那么多语法糖。高中vb语言，再加上大学一年c语言，感觉我的程序思维完全被vb和c语言塑造了。</p><p>from xshura:<br>1、利用python的max()和min()，在Python里字符串是可以比较的，按照ascII值排，举例abb， aba，abac，最大为abb，最小为aba。所以只需要比较最大最小的公共前缀就是整个数组的公共前缀</p><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> strs<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">""</span>        s1 <span class="token operator">=</span> min<span class="token punctuation">(</span>strs<span class="token punctuation">)</span>        s2 <span class="token operator">=</span> max<span class="token punctuation">(</span>strs<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>x <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">!=</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> s2<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> s1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、利用python的zip函数，把str看成list然后把输入看成二维数组，左对齐纵向压缩，然后把每项利用集合去重，之后遍历list中找到元素长度大于1之前的就是公共前缀</p><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> strs<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">""</span>        ss <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>set<span class="token punctuation">,</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> x <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> list<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            res <span class="token operator">=</span> res <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I/O subsystem</title>
      <link href="/2020/06/15/operating-system/io-subsystem/"/>
      <url>/2020/06/15/operating-system/io-subsystem/</url>
      
        <content type="html"><![CDATA[<p>在vmware虚拟机MINIX3中在MINIX3 中安装一块100MB 大小的RAM 盘，可以挂载并且存取文件操作，虚拟机MINIX3硬盘基于ssd</p><p>测试RAM 和DISK 盘的文件读写速度，并分析读写速度有差异的原因。</p><p>第一步：增加RAM盘：<br>修改/usr/src/minix/drivers/storage/memory/memory.c ，增加默认的用户<br>RAM盘数：RAMDISKS=7。</p><p>重新编译内核，重启reboot。</p><p>创建设备mknod /dev/myram b 1 13，</p><p>/<em>mknod 的使用方式</em>/<br>mknod DEVNAME{b|c} MAJOR MINOR<br>DEVNAME 创建的设备文件名，这里为/dev/myram</p><p>b:块设备：系统从设备中读取数据的时候，直接从内存的buffer 中读取数据，而不经过磁盘。<br>MAJOR 和MINOR 表示主设备号和次设备号。</p><p>查看设备是否创建成功输入ls<br>/dev/ | grep ram。</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/IO_subsystem/20200615163107.jpg" alt="img"></p><p>实现buildmyram初始化工具（用于分配容量）。</p><ol><li>在/usr/src/minix/commands/目录下新建buildmyram 文件夹，<br>参照 /usr/src/minix/commands/ramdisk 文件增加buildmyram 也作为minix 的内置命令。</li><li>编写buildmyram.c 文件<br>类比ramdisk.c，修改<code>PATH</code>变量。<br>然后再buildmyram文件下新建Makefile，在commands目录下修改Makefile<br>编译buildmyram.c文件，即可将buildmyram作为新增对的commands内置命令</li></ol><p><img src="https://gitee.com/wu_lin_long/image/raw/master/IO_subsystem/20200615163208.jpg" alt="img"></p><p>在ram盘上创建内存文件系统：<br>mkfs.mfs /dev/myram</p><p>将ram盘挂载到用户目录下，mount /dev/myram /root/myram,查看是否挂在成功：输入df<br>提前在root下创建一个directory， myram</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/IO_subsystem/20200615163226.jpg" alt="img"></p><p>二、性能测试<br>性能测试的文件：</p><ol><li>多线程并发的同步读写</li><li>并发的数目要增加到设备接近“饱和“的状态，在出现饱和之前，总吞吐量随着并发数线性增长</li><li>性能测试的二个变量为“块大小”（推荐64B/256B/1KB/4KB/8KB）和“块扫描方式”（顺序/随机）可以画四张曲线图对比RAM盘和Disk盘性能（随机读，随机写，顺序读，顺序写）。实验结果预计为RAM盘性能高于DISK盘，特别是随机读写性能。</li></ol><p>在disk顺序写的情况下，blocksize为8192B的情况下，并发数和吞吐率的关系如下</p><p>blocksize    concurrency    per time    mBps<br>8192    1    0.0733    106.5825<br>8192    2    0.12915    60.49168<br>8192    3    0.082767    94.39187<br>8192    4    0.072075    108.394<br>8192    5    0.06366    122.7223<br>8192    6    0.060267    129.6322<br>8192    7    0.057143    136.7188<br>8192    8    0.058537    133.4615<br>8192    9    0.0624    125.2003<br>8192    10    0.05483    142.4859<br>8192    11    0.053182    146.9017<br>8192    12    0.176108    44.3619<br>8192    13    0.177046    44.12691</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/IO_subsystem/20200615165152.png" alt="img"></p><p>在并发达到12的时候开始有明显的clashing，所以综合考虑，在本次实验中选择并发数为10进行实验。</p><p>由于实验基于ssd，而且磁盘设置大小设置得比较小，只有100兆，受缓存的影响比较大，导致吞吐率过高。<br>写测试如下：<br>并发数    blocksize    ram顺序写    disk顺序写    ram随机写    disk随机写<br>10    64    12.207031    11.451249    7.629395    6.541817<br>10    128    22.194602    23.657037    15.590078    12.41814<br>10    256    40.690104    43.134386    29.919194    27.126736<br>10    512    75.120192    73.315503    59.838388    49.672558<br>10    1024    162.760417    91.609991    76.115549    102.796053<br>10    2048    300.480769    116.050208    165.099324    202.186853<br>10    4096    617.101106    134.698276    266.456344    172.38526<br>10    8192    976.5625    142.045455    426.213857    337.327288<br>很明显ram顺序写和随机写都比disk要快，由于是SSD，所以disk随机写的速度并不比ram随机写慢很多，而且有两个值还超过了ram随机写。值得注意的是disk的顺序写比disk的随机写要慢，实际上这是不符合逻辑的。</p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/IO_subsystem/20200615165210.png" alt="img"></p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/IO_subsystem/20200615165219.png" alt="img"></p><p>读测试如下：<br>并发数    blocksize    ram顺序读    disk顺序读    ram随机读    disk随机读<br>10    64    10.172526    13.097673    7.180607    6.781684<br>10    128    21.567193    25.273357    14.095879    13.824497<br>10    256    39.633218    48.828125    26.652907    27.648995<br>10    512    77.137638    94.628149    53.305813    54.253472<br>10    1024    172.53754    167.50643    97.65625    110.59598<br>10    2048    404.37371    244.14063    186.011905    209.338156<br>10    4096    868.05556    360.6879    344.770521    366.439962</p><p>可以发现ram顺序读比disk顺序读要快，但是ram随机读和disk随机读速度差不多。</p><p>  <img src="https://gitee.com/wu_lin_long/image/raw/master/IO_subsystem/20200615165231.png" alt="img"></p><p><img src="https://gitee.com/wu_lin_long/image/raw/master/IO_subsystem/20200615165247.png" alt="img"></p><ol><li><p>四、 总结</p><p>理论上，顺序读写比随机读写快，因为顺序不像随机一样，会造成大量的磁盘碎片。</p><p>RAM理论上读写性能好于机械硬盘，因为在机械硬盘中存在机械结构，读取和写入需要由磁头在转动的硬盘上寻找文件所在的扇区。在机械硬盘io的时候，寻道时间和旋转延迟非常影响硬盘速度。而SSD则运用了闪存技术，消除了机械结构，缩短了硬盘和RAM速度的差距，本次实验由于是在SSD上，所以差距体现并不如机械硬盘上明显。同时，缓存的大小对实验结果也有影响。这次实验结果偏高可能同时有ssd和缓存的影响，尤其是在磁盘设置100MB不是很大的情况下，缓存的影响相对就更大了，导致此次实验吞吐率偏高。</p></li></ol><p>   五、 改进建议</p><ol><li><p>建议增大磁盘的容量，至少1G以上，这样削弱缓存的影响。</p></li><li><p>每做一次读或者写的操作，就重新加载一次磁盘，避免缓存的影响。</p></li><li><p>判断读写测试函数的返回值，这样以免读写发生错误。</p></li><li><p>增大随机读写时rand（）函数的范围</p></li></ol><p>To be honest, there are a lot of difficulties during the experiment and I am not quite sure why the results did not meet expectations. I will leave it to the future when l have improved my knowledge and skills and then it will be appropriate to experiment it again.</p>]]></content>
      
      
      <categories>
          
          <category> operating system </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode996正方形数组的数目</title>
      <link href="/2020/06/14/leetcode/leetcode996-zheng-fang-xing-shu-zu-de-shu-mu/"/>
      <url>/2020/06/14/leetcode/leetcode996-zheng-fang-xing-shu-zu-de-shu-mu/</url>
      
        <content type="html"><![CDATA[<p>‘’’<br>给定一个非负整数数组 A，如果该数组每对相邻元素之和是一个完全平方数，则称这一数组为正方形数组。</p><p>返回 A 的正方形排列的数目。两个排列 A1 和 A2 不同的充要条件是存在某个索引 i，使得 A1[i] != A2[i]。</p><p>示例 1：</p><p>输入：[1,17,8]<br>输出：2<br>解释：<br>[1,8,17] 和 [17,8,1] 都是有效的排列。<br>示例 2：</p><p>输入：[2,2,2]<br>输出：1</p><p>提示：</p><p>1 &lt;= A.length &lt;= 12<br>0 &lt;= A[i] &lt;= 1e9</p><p>‘’’</p><p>‘’’<br>这道题可以构造一张图，每个数作为一个节点，如果两个数加起来满足是一个完全平方数，就连一条边。<br>我们的目标就是求这张图的所有哈密顿路径，即经过图中所有点仅一次的路径。</p><p>‘’’</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">numSquarefulPerms</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>        N <span class="token operator">=</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span>        count <span class="token operator">=</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span>A<span class="token punctuation">)</span>        graph <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> count<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">#把count中的元素x都保存成一个集合</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> count<span class="token punctuation">:</span>            <span class="token keyword">for</span> y <span class="token keyword">in</span> count<span class="token punctuation">:</span>                <span class="token keyword">if</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">**</span><span class="token punctuation">.</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">==</span> x<span class="token operator">+</span>y<span class="token punctuation">:</span>                    graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#构造一个图，每个数作为一个节点，两个节点如果符合条件的话，就连一条边</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> todo<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#dfs，传入两个参数，第一个参数是某个数，第二个参数是总长度减一</span>            count<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-=</span><span class="token number">1</span>    <span class="token comment" spellcheck="true">#x的count减一，表示已经经历过一次这个数了，当然一个数字是可以重复次数的，count不一定是1</span>            <span class="token keyword">if</span> todo <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#如果todo是0的话，ans就置为1 ,作为递归终结的条件</span>                ans <span class="token operator">=</span> <span class="token number">1</span>                 <span class="token keyword">else</span><span class="token punctuation">:</span>                ans <span class="token operator">=</span> <span class="token number">0</span>     <span class="token comment" spellcheck="true">#如果todo不是0的话，ans置为0，防止递归的时候出错。</span>                <span class="token keyword">for</span> y <span class="token keyword">in</span> graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#对每个y in graph[x] ，即对每个x的临边</span>                    <span class="token keyword">if</span> count<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果count【y】不是0的话，即如果不是这个数都被遍历过一边的话</span>                        ans <span class="token operator">+=</span> dfs<span class="token punctuation">(</span>y<span class="token punctuation">,</span> todo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#就递归寻找路径，dfs的第一个参数是x相邻的y，第二个参数是todo-1</span>            count<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">#回溯步骤，本来x设置为遍历过了，count【x】+1返回没有遍历的状态。</span>            <span class="token keyword">return</span> ans           <span class="token keyword">return</span> sum<span class="token punctuation">(</span>dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> count<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#对每个不重复的x开头的，求其通路的数目，再求和</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>little tricks</title>
      <link href="/2020/05/20/little-tricks/"/>
      <url>/2020/05/20/little-tricks/</url>
      
        <content type="html"><![CDATA[<p>解决从github git clone速度慢的问题：</p><p>只需要将 <a href="http://www.github.com/" target="_blank" rel="noopener">www.github.com/</a> 后面为代码库 改为</p><p><a href="http://www.github.com.cnpmjs.org/" target="_blank" rel="noopener">www.github.com.cnpmjs.org/</a> 后面为代码库地址就可以实现一键式加速。</p><p>设置git的缓存大小：</p><p>git config http.postBuffer 524288000</p><p>filezilla：<br>开了代理是连接不上远程服务器的，除非手动设置一下代理服务器<br>用本机ssh连接虚拟机选用主机模式，上外网用NAT</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Birthday Problem</title>
      <link href="/2020/05/15/birthday-problem/"/>
      <url>/2020/05/15/birthday-problem/</url>
      
        <content type="html"><![CDATA[<h2 id="birthday-problem"><a href="#birthday-problem" class="headerlink" title="birthday problem"></a>birthday problem</h2><p>Coincidentally, during the first year of high school, three people in the class had the same birthday. It was easy to calculate the probability of two or more people having the same birthday, however, I was curious about the probability of three or more people.<br>It turns out to be around 6.6%, and the probability of only two people having the same birthday is around 82.5%, which is consistent with perceptual cognition.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#计算40个人当中，只有两个人生日相同的概率</span><span class="token keyword">import</span> mathSn <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#n是选出来结对的人</span>    <span class="token comment" spellcheck="true">#在可能的40个人所结成的780种可能的对子中，找出n/2对，然后把每一对看成一个人</span>    pairs <span class="token operator">=</span> <span class="token number">1</span>    temp <span class="token operator">=</span> n    <span class="token comment" spellcheck="true">#计算pairs</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        pairs <span class="token operator">=</span> pairs <span class="token operator">*</span> math<span class="token punctuation">.</span>comb<span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">-</span> temp<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        temp <span class="token operator">-=</span> <span class="token number">2</span>    <span class="token comment" spellcheck="true"># 去除重复的pairs</span>    pairs <span class="token operator">=</span> pairs <span class="token operator">/</span> math<span class="token punctuation">.</span>perm<span class="token punctuation">(</span>int<span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(pairs)</span>    <span class="token comment" spellcheck="true">#计算在挑出n个人结对之后，所产生的可能的概率</span>    Pn <span class="token operator">=</span> pairs <span class="token operator">*</span> math<span class="token punctuation">.</span>perm<span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token operator">-</span>int<span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>math<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#累计</span>    Sn <span class="token operator">=</span> Sn <span class="token operator">+</span> Pn<span class="token comment" spellcheck="true">#print('%.10f' % Sn)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> mathp <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> math<span class="token punctuation">.</span>perm<span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token operator">/</span>math<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'高一班上至少两人生日相同的概率：%.10f'</span> <span class="token operator">%</span> p<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%e'</span> <span class="token operator">%</span> math<span class="token punctuation">.</span>perm<span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%e'</span> <span class="token operator">%</span> math<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> math<span class="token punctuation">.</span>perm<span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token operator">/</span>math<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">-</span> Sn<span class="token comment" spellcheck="true">#p2 = math.comb(40, 2) * math.perm(365, 39)/math.pow(365,40)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'只有两个人生日相同的概率：%.10lf'</span> <span class="token operator">%</span> Sn<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'至少三人生日相同的概率：%.10f'</span> <span class="token operator">%</span> p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>高一班上至少两人生日相同的概率：0.89123180983.374555e+1013.102520e+102只有两个人生日相同的概率：0.8243423240至少三人生日相同的概率：0.0668894858</code></pre>]]></content>
      
      
      <categories>
          
          <category> programming practice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> probability theory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客从github到阿里云</title>
      <link href="/2020/04/11/hexo-bo-ke-cong-github-dao-a-li-yun/"/>
      <url>/2020/04/11/hexo-bo-ke-cong-github-dao-a-li-yun/</url>
      
        <content type="html"><![CDATA[<p>建站到现在也有一段时间了，一开始只是hexo+github，因为github的服务器在国外，国内访问速度比较慢，所以在码云上又部署了一份，智能解析，国内走码云，国外走github。但是后来发现码云的服务器是腾讯云的，并且不支持阿里云备案的接入，网站无法访问，于是放弃giteepages，决定在阿里云上部署，国内解析走阿里云。</p><p>建站到现在精力基本上都花在定制优化博客上了，文章却没怎么写，希望以后可以多写写文章。</p><p>网上的云服务器部署教程大都是CentOs，而我选的操作系统是Ubuntu 18.04.4 LTS，所以找了很多教程，也花了很多时间，踩了很多坑。下面记录hexo博客阿里云的部署：</p><h3 id="1-安装git和nginx"><a href="#1-安装git和nginx" class="headerlink" title="1.安装git和nginx"></a>1.安装git和nginx</h3><p>首先需要在云服务器上安装git和nginx</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">apt-get</span> update<span class="token function">apt-get</span> <span class="token function">install</span> git-core nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-配置Nginx"><a href="#2-配置Nginx" class="headerlink" title="2.配置Nginx"></a>2.配置Nginx</h3><p> /var/www/blog目录用于放置生成的静态文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> /var/www/blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编写nginx配置文件</p><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/nginx/conf.d/blog.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>监听80端口</p><pre class="line-numbers language-bash"><code class="language-bash">server<span class="token punctuation">{</span>    listen 8080<span class="token punctuation">;</span>    root /var/www/blog<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启nginx</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果失败，可以看看nginx报什么错，是不是配置写错了，或者是不是正确安装了。</p><p>可以使用</p><pre class="line-numbers language-bash"><code class="language-bash">nginx -t   <span class="token comment" spellcheck="true">#检查nginx配置是否正确</span><span class="token comment" spellcheck="true">#正常情况下会返回：</span><span class="token comment" spellcheck="true">#nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><span class="token comment" spellcheck="true">#nginx: configuration file /etc/nginx/nginx.conf test is successful</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果报端口占用的话，</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">netstat</span> -tlpn   <span class="token comment" spellcheck="true">#观察使用应用使用端口的情况</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用kill + 对应的pid，关闭使用这个端口的程序，</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">kill</span> 3480 <span class="token comment" spellcheck="true">#关掉pid为3480的进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-配置Git-Hooks"><a href="#3-配置Git-Hooks" class="headerlink" title="3. 配置Git Hooks"></a>3. 配置Git Hooks</h3><h4 id="创建Git裸仓库"><a href="#创建Git裸仓库" class="headerlink" title="创建Git裸仓库"></a>创建Git裸仓库</h4><p>生成blog.git作为远程Git仓库，Hexo在本地生成的博客静态文件可以通过push与其同步。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> ~/blog.git <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> ~/blog.git<span class="token function">git</span> init --bare<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="配置Hooks脚本"><a href="#配置Hooks脚本" class="headerlink" title="配置Hooks脚本"></a>配置Hooks脚本</h4><p>编写post-receive脚本使其在blog.git仓库接收到push时执行。</p><pre class="line-numbers language-bash"><code class="language-bash">vim blog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>脚本非常简单，删除原有的/var/www/blog目录，然后从blog.git仓库clone新的博客静态文件。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">rm</span> -rf /var/www/blog<span class="token function">git</span> clone /root/blog.git /var/www/blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>给post-receive脚本执行权限</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> +x blog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-部署Hexo博客"><a href="#4-部署Hexo博客" class="headerlink" title="4. 部署Hexo博客"></a>4. 部署Hexo博客</h3><h4 id="在本地hexo修改-config-yml"><a href="#在本地hexo修改-config-yml" class="headerlink" title="在本地hexo修改_config.yml"></a>在本地hexo修改_config.yml</h4><pre><code>deploy:  type: git  repo: root@xx.xx.xx.xx:blog.git     #用户名@你的ip地址:blog.git</code></pre><h4 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h4><p>hexo先生成新的博客静态文件，然后通过git将其同步到云服务器的blog.git仓库。</p><pre class="line-numbers language-bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-云安全组和dns解析"><a href="#5-云安全组和dns解析" class="headerlink" title="5.云安全组和dns解析"></a>5.云安全组和dns解析</h3><p>阿里云的服务器后台端口不是默认开放的，需要手动在云安全组里添加<strong>80/443端口</strong>访问许可.</p><p>云服务器的防火墙如果开着，也有可能导致不能访问，</p><pre class="line-numbers language-bash"><code class="language-bash">ufw status <span class="token comment" spellcheck="true">#观察防火墙状态</span>ufw disable <span class="token comment" spellcheck="true">#关闭防火墙</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以用wget测试nginx是不是成功运行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> http://xx.xx.xx.xx  <span class="token comment" spellcheck="true">#你的ip地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-ssh配置"><a href="#6-ssh配置" class="headerlink" title="6.ssh配置"></a>6.ssh配置</h3><p>将本地的ssh公钥传到服务器上</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-copy-id root@xx.xx.xx.xx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>公钥验证的原理是，服务器发送一段字符给客户，客户私钥签名之后发回去，服务器再用公钥验证，验证通过就建立连接，这样就实现了免密登录。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Document Object Model</title>
      <link href="/2020/03/21/document-object-model/"/>
      <url>/2020/03/21/document-object-model/</url>
      
        <content type="html"><![CDATA[<p>The DOM is an object-based representation of the source HTML document. It has some differences compared with the source HTML document, but it is essentially an attempt to convert the structure and content of the HTML document into an object model that can be accessed by various programs.</p><p>There are two cases when the DOM can be different from the source HTML.</p><p>The first case is when HTML source code is not valid.</p><p>When the HTML code has some mistakes, during the processing of the DOM, the browser may correct some mistakes in the HTML code to form the valid HTML document as the DOM must be a valid interface. But sometimes HTML can be so broken that the browser can’t correct at all.</p><p>Changing content in the DOM will change the view of the web page, but it will not change the HTML source code.</p><p>The second case is when the DOM is modified by JavaScript.</p><p>DOM is a living model that can be modified by JavaScript, it provides an interface for JavaScript to modify the content, structure, or styling of the page.</p><p>Adding JavaScript programs will change the DOM, but will also not change the HTML source code.</p>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frontend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在樱花漫天飞舞的时刻</title>
      <link href="/2020/03/15/zai-ying-hua-man-tian-fei-wu-de-shi-ke/"/>
      <url>/2020/03/15/zai-ying-hua-man-tian-fei-wu-de-shi-ke/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=440241194&auto=1&height=66">"></iframe></div><blockquote><p>桜の舞う空の彼方<br>在樱花满空飞舞的他方<br>目を閉じれば心の中<br>如果闭上眼睛就在心里</p></blockquote><p>在樱花漫天飞舞的时刻，你也一定能看得到</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
